<HTML XMLNS:IE XMLNS:MSNTV>
<HEAD>
<?IMPORT NAMESPACE="IE" IMPLEMENTATION="#default">
<?import namespace="msntv" implementation="file://\web\HTC\CustomButton.htc">
<script language="Javascript" src="msntv:/Javascript/TVShell.js"></script>
<script language="Javascript" src="msntv:/Javascript/Print.js"></script>
<script language="Javascript" src="msntv:/Javascript/VKCodes.js"></script>

<STYLE TYPE="text/css">
.lorstyle
{
	width:8in;
	height:10in;
	margin:0in;
}

.pagestyle
{
	width:8.5in;
	height:11in;
	margin:0in;
	background-color:white;
	position:absolute;
	left:-2000px;
	top:0px;
}

.headerstyle
{
	position:absolute;
	margin:0in;
	left:0.25in;
	top:0.25in;
	width:8in;
}

.footerstyle
{
	position:absolute;
	margin:0in;
	left:0.25in;
	bottom:10.75in;
	width:8in;
}

#TopDIV
{
	margin-left:60px;
	margin-top:0px;
	background-color:;
}

#sideBar
{
	position: absolute;
	top: 71px;
	right: 0px;
	width: 175px;
	padding-right: 50px;
	padding-left: 6px;
}

.sideBarElement
{
	width:100%;
	margin-bottom:8px;
}

#pageNumSpan
{
	position:absolute;
	margin:22px;
	color:navy;
}

#pageRangeSpan
{
	position:absolute;
	left:54%;
	margin:13px;
	color:navy;
}

.inputText
{
	background-color:#485464;
	color:#F2F2F2;
	border-style:window-inset;
	border-width: 4px;
	border-color: #9297A1;
	border-right-color: #6F7783;
	padding-left:3px;
	padding-right:4px;
	zoom:127%;
	vertical-align:middle;
}
</STYLE>

<SCRIPT LANGUAGE="JScript">
var OffScreen_Left = "-2000px";
var OffScreen_Top = "0px";
var OnScreen_Left = "0px";
var OnScreen_Top = "0px";
var CurrentZoomValue = 0;
var CurrentZoomLevel = 0;
var PageNum = 1;
var iNextPageToCreate = 1;
var oPageStyleClass;
var oLorStyleClass;
var oHeaderStyleClass;
var oFooterStyleClass;
var aborted=false;

var PrintManager=TVShell.PrintManager;
var Sink = new ActiveXObject("MSNTV.MultipleEventSink");

// Returns the object corresponding to a named style rule
function FindStyleRule(styleName)
{
	for (i = 0; i < document.styleSheets.length; i++) {
		for (j = 0; j < document.styleSheets(i).rules.length; j++) {
			if (document.styleSheets(i).rules(j).selectorText == styleName)
				return document.styleSheets(i).rules(j);
		}
	}
}

function IdleDetection(event)
{
	var handled = false;

	if ("Preview" != dialogArguments.__IE_PrintType) {
		// pass the key strokes along
		return !handled;
	}

	// Tell TVShell and the screen saver about user activity
	TVShell.IdleTime = 0;
	TVShell.ScreenSaver.UserActive();

	if ("keydown" == event.type) {
		if (!event.ctrlKey) {
			switch(event.keyCode) {
				case VK_ADD:
					ZoomIn();
					handled = true;
					break;

				case VK_SUBTRACT:
					ZoomOut();
					handled = true;
					break;

				case VK_BROWSER_BACK:
					ClosePreview();
					handled = true;
					break;

				case 34:  // Scroll Down
					if (CanPanUp()) {
						PanUp();
						UpdateArrows();
					} else {
						TVShell.DeviceControl.PlaySound("Page_Boundary");
					}

					handled = true;
					break;

				case 33:  // Scroll Up
					if (CanPanDown()) {
						PanDown();
						UpdateArrows();
					} else {
						TVShell.DeviceControl.PlaySound("Page_Boundary");
					}

					handled = true;
					break;

				case 36:  // Jump To Top
					if (CanPanDown()) {
						PanToTop();
						UpdateArrows();
					} else {
						TVShell.DeviceControl.PlaySound("Page_Boundary");
					}

					handled = true;
					break;

				case 122:  // Videos
				case 121:  // Music
				case 181:  // Player
				case 171:  // Favs
				case 116:  // Save Fav
				case 112:  // Fav #1
				case 113:  // Fav #2
				case 114:  // Fav #3
				case 172:  // Home
				case 180:  // Mail
				case 119:  // Msgr
				case 170:  // Search
				case 123:  // Photos
				case 118:  // Menu
				case 120:  // Recent
				case 115:  // Type WWW
					// <byte2 == LParam><byte1 == WParam><byte0 == message>
					var KeyMessage = Print_NotifyPrintPanelMessageKey & 0xFF | (event.keyCode & 0xFF) << 8;
					PrintManager.PrintPanelNotification = KeyMessage;
					ClosePreview();
					break;

				case 117:  // Resize Page
					TVShell.DeviceControl.PlaySound("Page_Boundary");
					handled = true;
					break;

				case 42:  // Print
					Print();
					handled = true;
					break;

				case 168:  // Refresh
					handled = true;
					break;
			}
		} else {
			switch(event.keyCode) {
				case VK_POWER:
					PrintManager.PrintPanelNotification = Print_NotifyPrintPanelPowerdown;
					ClosePreview();
					break;

				case 33:  // Ctrl-Scroll Up, same as Jump To Top
					if (CanPanDown()) {
						PanToTop();
						UpdateArrows();
					} else {
						TVShell.DeviceControl.PlaySound("Page_Boundary");
					}

					handled = true;
					break;

				case 34:  // Ctrl-Scroll Down, jumps to the bottom
					if (CanPanUp()) {
						PanToBottom();
						UpdateArrows();
					} else {
						TVShell.DeviceControl.PlaySound("Page_Boundary");
					}

					handled = true;
					break;
			}
		}
	}

	if (handled) {
		event.returnValue=false;
		event.cancelBubble=true;
	}

	//pass on to next handler only if handled == false
	return !handled;
}

function CheckForNotice()
{
	if (Print_NotifyPreviewClose == PrintManager.PreviewNotification) {
		PrintManager.PreviewNotification = Print_NotifyPreviewNull;
		ClosePreview();
	}

	setTimeout("CheckForNotice();", 1000);
}

var printerPageWidth;
var printerPageHeight;

function Init()
{
	if ("Preview" == dialogArguments.__IE_PrintType) {
		document.all.closeTemplate.focus();
		document.attachEvent("onkeydown", IdleDetection);
		document.attachEvent("onmousedown", IdleDetection);
		PrintManager.PreviewNotification = Print_NotifyPreviewNull;
		setTimeout("CheckForNotice();", 1000);
	}

	ZoomTo(0);
	Sink.AttachEvent(PrintManager, "OnPrintJobCanceled", OnPrintJobCanceled);
	Sink.AttachEvent(PrintManager, "OnCancelTemplatePrint", OnCancelTemplatePrint);

	var printerSelected = PrintManager.SubKeyName;
	var Orientation = PrintManager.Orientation;

	oPageStyleClass = FindStyleRule(".pagestyle");
	oLorStyleClass = FindStyleRule(".lorstyle");
	oHeaderStyleClass = FindStyleRule(".headerstyle");
	oFooterStyleClass = FindStyleRule(".footerstyle");

	var printerMarginBottom = printer.marginBottom;
	var printerMarginTop = printer.marginTop;
	var printerMarginLeft = printer.marginLeft;
	var printerMarginRight = printer.marginRight;
	var printerUnprintableTop = printer.unprintableTop;
	var printerUnprintableBottom = printer.unprintableBottom;
	var printerUnprintableRight = printer.unprintableRight;
	var printerUnprintableLeft = printer.unprintableLeft;
	var currentPrinter = PrintManager.Item(PrintManager.CurrPrintDevice);

	printerPageWidth = printer.pageWidth;
	printerPageHeight = printer.pageHeight;

	if ("B5" == PrintManager.PaperSize) {
		printerPageHeight = 600;
		printerPageWidth = 400;

		printerMarginBottom = 0;
		printerMarginTop = 0;
		printerMarginLeft = 0;
		printerMarginRight = 0;
		printerUnprintableBottom = 0;
		printerUnprintableRight = 0;
		printerUnprintableTop = 0;
		printerUnprintableLeft = 0;
	}

	var headerFooterSpace = 0;

	if (PrintManager.Header || PrintManager.Footer) {
		headerFooterSpace = 0.25;
	}

	if(Orientation=="Landscape"){
		oPageStyleClass.style.height = printerPageWidth/100 + "in";
		oPageStyleClass.style.width = printerPageHeight/100 + "in";

		oLorStyleClass.style.marginLeft = printerMarginLeft/100 + "in";
		oLorStyleClass.style.marginBottom = printerMarginBottom/100 + "in";
		oLorStyleClass.style.marginTop = printerMarginTop/100 + "in";
		oLorStyleClass.style.marginRight = printerMarginRight/100 + "in";
	
		oLorStyleClass.style.height = (printerPageWidth - printerUnprintableTop - printerUnprintableBottom - printerMarginTop - printerMarginBottom)/100 - 2*headerFooterSpace + "in";
		oLorStyleClass.style.width = (printerPageHeight - printerUnprintableRight - printerUnprintableLeft - printerMarginLeft - printerMarginRight)/100 + "in";

		oHeaderStyleClass.style.left = (printerUnprintableBottom+printerMarginLeft)/100 + "in";
		oHeaderStyleClass.style.top = printerUnprintableRight/100 + headerFooterSpace + "in";
		oHeaderStyleClass.style.width = (printerPageHeight - (printerMarginLeft + printerMarginRight))/100 +"in";

		oFooterStyleClass.style.left = (printerUnprintableBottom+printerMarginLeft)/100 + "in";
		oFooterStyleClass.style.top = (printerPageWidth-printerMarginTop)/100 + "in";
		oFooterStyleClass.style.bottom = (printerPageWidth-printerMarginBottom)/100+headerFooterSpace + "in";
		oFooterStyleClass.style.width = (printerPageHeight - (printerMarginLeft + printerMarginRight))/100 +"in";
	} else {
		oPageStyleClass.style.width = printerPageWidth/100 + "in";
		oPageStyleClass.style.height = printerPageHeight/100 + "in";

		oLorStyleClass.style.marginTop = printerMarginTop/100 + "in";
		oLorStyleClass.style.marginBottom = printerMarginBottom/100 + "in";
		oLorStyleClass.style.marginLeft = printerMarginLeft/100 + "in";
		oLorStyleClass.style.marginRight = printerMarginRight/100 + "in";

		oLorStyleClass.style.width = (printerPageWidth - printerUnprintableRight - printerUnprintableLeft - printerMarginRight - printerMarginLeft)/100 +"in";
		oLorStyleClass.style.height = (printerPageHeight - printerUnprintableTop - printerUnprintableBottom - printerMarginTop - printerMarginBottom)/100 - 2*headerFooterSpace + "in";

		oHeaderStyleClass.style.left = printerMarginLeft/100  + "in";
		oHeaderStyleClass.style.top = printerUnprintableTop/100 + headerFooterSpace + "in";
		oHeaderStyleClass.style.width = (printerPageWidth- printerMarginLeft- printerMarginRight-printerUnprintableRight)/100+"in";

		oFooterStyleClass.style.left = printerMarginLeft/100 + "in";
		oFooterStyleClass.style.top = (printerPageHeight-printerUnprintableBottom-printerMarginBottom-10)/100+"in";
		oFooterStyleClass.style.bottom = (printerPageHeight-printerUnprintableBottom-printerMarginBottom-10)/100 + headerFooterSpace + "in";
		oFooterStyleClass.style.width = (printerPageWidth- printerMarginLeft-  printerMarginRight-printerUnprintableRight)/100+"in";
	}

	AddFirstPage("document");
}

function CheckPrint()
{
	switch (dialogArguments.__IE_PrintType) {
		case "NoPrompt":
			PrintPrep();
			break;

		case "Preview":
			break;

		default:
			break;
	}
}

function AddFirstPage(contentSource)
{
	PrintManager.FirePrintStatus(0,0,0,0); // start layout

	newHTML  = "<IE:DEVICERECT ID='page1' MEDIA='print' CLASS='pagestyle' STYLE='left:0px;top:0px;'>";
	newHTML += "<IE:LAYOUTRECT ID='layoutrect1' CONTENTSRC='" + contentSource + "' ONLAYOUTCOMPLETE='OnRectComplete()' NEXTRECT='layoutrect2' CLASS='lorstyle'/>";
	newHTML += "</IE:DEVICERECT>";

	pagecontainer.insertAdjacentHTML("afterBegin", newHTML);

	headfoot.textHead = printer.header;
	headfoot.textFoot = printer.footer;
	headfoot.url = dialogArguments.__IE_BrowseDocument.URL;

	//If a page uses "title" as ID or name for an element other than HTML title element, 
	//this will confuse print template. For example:http://www.airstream.com/product_line/motorhomes/interstate_home.html
	//Desktop printout will have "[object]" as the title.  It is a known bug for IE
	//In our code, we retrieve title through "TITLE" tag. 
	try {
		headfoot.title = dialogArguments.__IE_BrowseDocument.title;
	} catch(e) {
		var collection=dialogArguments.__IE_BrowseDocument.all.tags("title");
		if (collection.length > 0)
			headfoot.title= collection[0].innerText;
		else
			headfoot.title="";
	}

	headfoot.page = 1;
	AddHeaderAndFooterToPage(1);
	document.all.pageDown.disabled = true;  // Always start by displaying the first page
	document.all.pageUp.disabled = true;  // Enable once all pages rendered if there is more than one page
	iNextPageToCreate = 2;
}

function OnRectComplete()
{
	if (event.contentOverflow == true) {
		AddNewPage();
	} else {
		document.all("layoutrect" + (iNextPageToCreate-1)).onlayoutcomplete = null;

		headfoot.pageTotal = document.all.tags("DEVICERECT").length;
		AddPageTotalToPages();

		if ("Preview" == dialogArguments.__IE_PrintType) {
			DisplayPage(1);
			EnableDisableNextPrevious(PageNum);
			InitializePageRange();
		}

		setTimeout("CheckPrint();", 100);
	}
}

function AddNewPage()
{
	document.all("layoutrect" + (iNextPageToCreate - 1)).onlayoutcomplete = null;
	headfoot.page = iNextPageToCreate;

	newHTML = "<IE:DEVICERECT ID='page" + iNextPageToCreate +  "' MEDIA='print' CLASS='pagestyle'>";
	newHTML += "<IE:LAYOUTRECT ID='layoutrect" + iNextPageToCreate + "' ONLAYOUTCOMPLETE='OnRectComplete()' NEXTRECT='layoutrect" + (iNextPageToCreate + 1) + "'  CLASS='lorstyle'/>";
	newHTML += "</IE:DEVICERECT>";

	pagecontainer.insertAdjacentHTML("beforeEnd", newHTML);
	AddHeaderAndFooterToPage(iNextPageToCreate);
	iNextPageToCreate++;
}

function AddHeaderAndFooterToPage(pageNum)
{
	if (PrintManager.Header) {
		newHeader = "<DIV CLASS='headerstyle'><table width=100%><tr><td align=left><DIV width=70% ><span width=100% style='text-overflow:ellipsis;white-space:nowrap;'><NOBR>";
		
		if(headfoot.title.length<=50)
			newHeader += headfoot.title;
		else
			newHeader += (headfoot.title.substring(0,49)+"...");
		
		newHeader += "</NOBR></span></DIV></td><td align=right><DIV>";
		newHeader += headfoot.dateShort;
		newHeader += "</DIV></td></tr></table></DIV>";
	} else {
		newHeader = "<DIV CLASS='headerstyle'></DIV>";
	}

	if (PrintManager.Footer) {
		newFooter = "<DIV CLASS='footerstyle'><table width=100%><tr><td align=left><DIV width=70% ><span width=100% style='text-overflow:ellipsis;white-space:nowrap;'><NOBR>";
		
		if (headfoot.url.length<=50)
			newFooter += headfoot.url;
		else
			newFooter += (headfoot.url.substring(0,49)+"...");
		
		newFooter += "</NOBR></span></DIV></td><td align=right><DIV>";
		newFooter += "Page "+pageNum+"/<span class=hfPageTotal>1</span>";
		newFooter += "</DIV></td></tr></table></DIV>";
	} else {
		newFooter = "<DIV CLASS='footerstyle'></DIV>";
	}

	document.all("page" + pageNum).insertAdjacentHTML("afterBegin", newHeader); 
	document.all("page" + pageNum).insertAdjacentHTML("beforeEnd", newFooter);
}

function AddPageTotalToPages()
{
	oSpanCollection = document.all.tags("span");

	for (i = 0; i < oSpanCollection.length; i++) {
		if (oSpanCollection[i].className == "hfPageTotal")
			oSpanCollection[i].innerText = headfoot.pageTotal;
	}
}

function ClosePreview()
{
	window.close();
}

var ZoomStep = 0;

function ZoomLevelToValue(newZoomLevel)
{
	var maxZoomValue = 100;

	if (CurrentZoomLevel != 4) {
		ZoomStep = (maxZoomValue - CurrentZoomValue) / (4-CurrentZoomLevel);
	}

	CurrentZoomValue += parseInt(ZoomStep*(newZoomLevel-CurrentZoomLevel));
	CurrentZoomLevel = newZoomLevel;

	if(CurrentZoomValue > maxZoomValue) {
		CurrentZoomValue = maxZoomValue;
	}

	return(CurrentZoomValue);
}

function ZoomTo(newZoomLevel)
{
	var curZoomID = "zoom" + CurrentZoomLevel;
	
	if(document.all[curZoomID]) {
		document.all[curZoomID].bgColor = '#90A8C9';
	}

	ZoomPage(newZoomLevel);
	curZoomID = "zoom" + CurrentZoomLevel;

	if(document.all[curZoomID]) {
		document.all[curZoomID].bgColor = '#4BB359';
	}
}

function ZoomIn()
{
	switch (CurrentZoomLevel) {
		case 0:
		case 1:
		case 2:
		case 3:
			ZoomTo(CurrentZoomLevel+1);
			TVShell.DeviceControl.PlaySound("Task_Complete");
			break;

		case 4:
			TVShell.DeviceControl.PlaySound("Page_Boundary");
			break;
	}

	UpdateArrows();
}

var Left = 0;
var Top = 0;
var DefaultZoomValue;

function ZoomOut()
{
	switch (CurrentZoomLevel) {
		case 4:
		case 3:
		case 2:
		case 1:
			ZoomTo(CurrentZoomLevel-1);
			TVShell.DeviceControl.PlaySound("Task_Complete");
			break;
		case 0:
			TVShell.DeviceControl.PlaySound("Page_Boundary");
			break;
	}

	var LimitLeftValue = LimitLeft();

	if (Left < LimitLeftValue) {
		Left = LimitLeftValue;
	}

	var LimitTopValue = LimitTop();

	if (Top < LimitTopValue) {
		Top = LimitTopValue;
	}

	UpdateArrows();
}

function ZoomPage(zoomIndex)
{
	if (0 == zoomIndex) {
		DefaultZoomPage();
	} else {
		CurrentZoomValue = ZoomLevelToValue(zoomIndex);
		CurrentZoomLevel = zoomIndex;
		document.all.pagecontainer.style.zoom = CurrentZoomValue + "%";
		document.all.pagecontainer.style.marginTop = Top*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
		document.all.pagecontainer.style.marginLeft = Left*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function DefaultZoomPage()
{
	var useSafe = TVShell.DeviceControl.UseSafeArea;
	var screenWidth = useSafe ? TVShell.DeviceControl.SafeWidth : TVShell.DeviceControl.ScreenWidth;
	var screenHeight = useSafe ? TVShell.DeviceControl.SafeHeight : TVShell.DeviceControl.ScreenHeight;

	if ("Portrait" == PrintManager.Orientation) {
		CurrentZoomValue = (screenHeight*100)/(printer.pageHeight/100*96)*.8;
	} else {
		CurrentZoomValue = (screenWidth*100)/(printer.pageHeight/100*96)*.7;
	}

	CurrentZoomLevel = 0;
	document.all.pagecontainer.style.zoom = CurrentZoomValue + "%";
	document.all.pagecontainer.style.marginTop = 0;
	document.all.pagecontainer.style.marginLeft = 0;
	Left = 0;
	Top = 0;
	DefaultZoomValue = CurrentZoomValue;
}

// pageNum is the "1 based" page number designator
function DisplayPage(pageNum)
{
	var pages = document.all.tags("DEVICERECT");

	if (pageNum > pages.length) {
		pageNum = pages.length;
	} else if (pageNum < 1) {
		pageNum = 1;
	}

	var pageCurrent;
	var i;
	
	for (i=0; i<pages.length; i++) {
		pageCurrent = pages[i];

		if (pageCurrent.id && pageCurrent.id == "page" + pageNum) {
			pageCurrent.style.left = OnScreen_Left;
			pageCurrent.style.top = OffScreen_Top;
		} else {
			pageCurrent.style.left = OffScreen_Left;
			pageCurrent.style.top = OffScreen_Top;
		}
	}
}

function EnableDisableNextPrevious(pageNum)
{
	var pages = document.all.tags("DEVICERECT");

	if (pages.length > 1) {
		document.all.pageUp.disabled = false;
		document.all.pageDown.disabled = false;
	}

	document.all.pageNumSpan.innerHTML = "Page " + pageNum +" of " + pages.length;
}

function buttonPageUp() {
	var pages = document.all.tags("DEVICERECT");

	if (PageNum >= pages.length) {
		PageNum = pages.length;
		TVShell.DeviceControl.PlaySound("Page_Boundary");
	} else {
		PageNum++;
	}

	document.all.pageNumSpan.innerHTML = "Page " + PageNum +" of " + pages.length;
	DisplayPage(PageNum);
}

function buttonPageDown() {
	var pages = document.all.tags("DEVICERECT");

	if (PageNum <= 1) {
		PageNum = 1;
		TVShell.DeviceControl.PlaySound("Page_Boundary");
	} else {
		PageNum--;
	}

	document.all.pageNumSpan.innerHTML = "Page " + PageNum +" of " + pages.length;
	DisplayPage(PageNum);
}

function Print()
{
	PrintManager.PrintPanelNotification = Print_NotifyPrintPanelPrint;
	ClosePreview();
}

function PrintPrep()
{
	if (layoutrect1.contentDocument.readyState == "complete") {
		// This block will be called when printing with user prompt
		// because the Print dialog box gives time for the content
		// document to complete loading
		layoutrect1.contentDocument.onreadystatechange = null;
		TVShell.EnableTVShellWindow();
		PrintNow();
	} else {
		// This block will usually be called when printing w/o user prompt
		// and sets an event handler that listens for the loading of the content
		// document before printing. Sometimes, however, the content document
		// will be loaded in time for the previous block to execute
		layoutrect1.contentDocument.onreadystatechange = PrintWhenContentDocComplete;
	}
}

function PrintWhenContentDocComplete()
{
	if (layoutrect1.contentDocument.readyState == "complete") {
		layoutrect1.contentDocument.onreadystatechange = null;
		TVShell.EnableTVShellWindow();
		PrintNow();
	}
}

function OnPrintJobCanceled()
{
	TVShell.Message("Print canceled!");
	aborted=true;
	PrintManager.PrintTemplateClosing();
	window.close();
}
function OnCancelTemplatePrint()
{
	printer.updatePageStatus(0);
	printer.stopDoc();
	aborted=true;
	PrintManager.PrintTemplateClosing();
	window.close();
}

function PrintNow()
{
	try {
		var startPage;
		var endPage;
		var oDeviceRectCollection = document.all.tags("DEVICERECT");

		if (PrintManager.AllPages) {
			startPage = 1;
			endPage = oDeviceRectCollection.length;
		} else {
			startPage=PrintManager.FromPage;
			endPage=PrintManager.ToPage;
			if (startPage>oDeviceRectCollection.length) {

				var totalInfo;
				
				if (oDeviceRectCollection.length==1)
					totalInfo="There is 1 printout page in total.";
				else
					totalInfo="There are "+ oDeviceRectCollection.length +" printout pages in total.";

				TVShell.PanelManager.CustomMessageBox(totalInfo+" Please specify correct page range and try again.","Invalid page range", "OK", 0,"");
				PrintManager.FireTemplatePrintCompleted();
				PrintManager.PrintTemplateClosing();
				window.close();	
				return;

			} else if (endPage>oDeviceRectCollection.length) {
				endPage = oDeviceRectCollection.length;
				PrintManager.ToPage=endPage;
			}
		}

		printer.startDoc("Printing from templateNoPreview.htm");

		var copyIndex;
		var copies=printer.copies;

		for (copyIndex=1; copyIndex<=copies; copyIndex++) {
			if (aborted)
				break;

			for (i = endPage; i >= startPage; i--) {
				var length=oDeviceRectCollection.length;
				PrintManager.FirePrintStatus(copyIndex, i, length,1); //start printing this page
				printer.printPage(oDeviceRectCollection[i-1]);
				PrintManager.FirePrintStatus(copyIndex, i, length,2); // this page done
			}
			
			PrintManager.FirePrintStatus(copyIndex,0, 0, 3); // this copy done
		}

		if (!aborted) {
			printer.stopDoc();
			//close hidden print HTMLDialog
			//this is important, otherwise we wouldn't be able to switch focus to other panels
			TVShell.Message("Template print completed!");
			PrintManager.FireTemplatePrintCompleted();
			PrintManager.PrintTemplateClosing();
			window.close();
		}
	
	}catch(e) {
		TVShell.Message("Warning! Print exception: " + e.number + "; description: " + e.description);

// var E_OUTOFMEMORY = 0x80000002;
// 
// 		if (E_OUTOFMEMORY == e.number) {
// 			alert("We've run into problems printing, please turn off your " + ProductShortName + " and turn it on again while holding down the Alt-key on your keyboard.  (This will free up resources that are frozen.)");
// 		}
		
		PrintManager.FireTemplatePrintCompleted();
		PrintManager.PrintTemplateClosing();
		window.close();
	}
}

var MinLeft = -9;
var MinTop = -9;

function ZoomToNumber(ZoomValue) {
	// TVShell.Message("ZoomValue is " + parseFloat(ZoomValue)/100);
	return(parseFloat(ZoomValue)/100);
}

function LimitLeft()
{
	var LimitLeftValue = MinLeft * DefaultZoomValue/ZoomToNumber(document.all.pagecontainer.style.zoom)/100;

	LimitLeftValue = Math.min(0, MinLeft - Math.ceil(LimitLeftValue * ("Landscape" == PrintManager.Orientation?1:printerPageHeight/printerPageWidth)));

	return LimitLeftValue;
}

function CanPanLeft()
{
	var ReturnValue = false;

	if (Left > LimitLeft()) {
		ReturnValue = true;
	}

	return ReturnValue;
}

function CanPanRight()
{
	var ReturnValue = false;
	
	if (Left < 0) {
		ReturnValue = true;
	}

	return ReturnValue;
}

function LimitTop()
{
	var LimitTopValue = MinTop * DefaultZoomValue/ZoomToNumber(document.all.pagecontainer.style.zoom)/100;

	LimitTopValue = Math.min(0, MinTop - Math.ceil(LimitTopValue * ("Portrait" == PrintManager.Orientation?1:printerPageHeight/printerPageWidth)));

	return LimitTopValue;
}

function CanPanUp()
{
	var ReturnValue = false;

	if (Top > LimitTop()) {
		ReturnValue = true;
	}

	return ReturnValue;
}

function CanPanDown()
{
	var ReturnValue = false;
	
	if (Top < 0) {
		ReturnValue = true;
	}

	return ReturnValue;
}

function PanLeft()
{
	if (CanPanLeft()) {
		--Left;
	}

	if ("Portrait" == PrintManager.Orientation) {
		document.all.pagecontainer.style.marginLeft = Left*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	} else {
		document.all.pagecontainer.style.marginLeft = Left*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function PanRight()
{
	if (CanPanRight()) {
		++Left;
	}

	if ("Portrait" == PrintManager.Orientation) {
		document.all.pagecontainer.style.marginLeft = Left*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	} else {
		document.all.pagecontainer.style.marginLeft = Left*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function PanToTop()
{
	Top = 0;

	if ("Portrait" == PrintManager.Orientation) {
		document.all.pagecontainer.style.marginTop = Top*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	} else {
		document.all.pagecontainer.style.marginTop = Top*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function PanToBottom()
{
	Top = LimitTop();

	if ("Portrait" == PrintManager.Orientation) {
		document.all.pagecontainer.style.marginTop = Top*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	} else {
		document.all.pagecontainer.style.marginTop = Top*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function PanUp()
{
	if (CanPanUp()) {
		--Top;
	}

	if ("Portrait" == PrintManager.Orientation) {
		document.all.pagecontainer.style.marginTop = Top*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	} else {
		document.all.pagecontainer.style.marginTop = Top*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function PanDown()
{
	if (CanPanDown()) {
		++Top;
	}

	if ("Portrait" == PrintManager.Orientation) {
		document.all.pagecontainer.style.marginTop = Top*printerPageHeight/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	} else {
		document.all.pagecontainer.style.marginTop = Top*printerPageWidth/1000*ZoomToNumber(document.all.pagecontainer.style.zoom) + "in";
	}
}

function UpdateArrows()
{
	if(CanPanDown())
		ScrollUpArrow.style.visibility = "visible";
	else
		ScrollUpArrow.style.visibility = "hidden";

	if (CanPanUp())
		ScrollDownArrow.style.visibility = "visible";
	else
		ScrollDownArrow.style.visibility = "hidden";

	if (CanPanRight())
		ScrollLeftArrow.style.visibility = "visible";
	else
		ScrollLeftArrow.style.visibility = "hidden";

	if (CanPanLeft())
		ScrollRightArrow.style.visibility = "visible";
	else
		ScrollRightArrow.style.visibility = "hidden";

	ScrollUpArrow.style.right = "1.5%";
	ScrollUpArrow.style.top = "10px";
	
	ScrollDownArrow.style.right = "1.5%";
	ScrollDownArrow.style.bottom = "8px";
	
	ScrollRightArrow.style.right = "1%";
	ScrollRightArrow.style.top = "50%";
	
	ScrollLeftArrow.style.left = "5px";
	ScrollLeftArrow.style.top = "50%";
}

function HandleKey()
{
	var playSound = false;
	var handled = false;
	var key = event.keyCode;

	// TVShell.Message("HandleKey(): Key = " + key);

	if ("Preview" != dialogArguments.__IE_PrintType) {
		// pass the key strokes along
		return true;
	}

	switch (key) {
		case 40:  // Down Arrow
			if (CanPanUp()) {
				PanUp();
			} else {
				playSound = true;
			}

			handled = true;
			break;

		case 38:  // Up Arrow
			if (CanPanDown()) {
				PanDown();
			} else {
				playSound = true;
			}

			handled = true;
			break;

		case 39:  // Right Arrow
			if (CanPanLeft()) {
				PanLeft();
				handled = true;
			}

			break;

		case 37:  // Left Arrow
			if (CanPanRight()) {
				PanRight();
			} else {
				playSound = true;
			}

			handled = true;
			break;

		case 13:	//enter key
			handled = true;
			playSound = true;
			break;

		default:
			break;
	}

	if ( playSound ) {
		TVShell.DeviceControl.PlaySound("Page_Boundary");
	}

	UpdateArrows();

	if (handled) {
		event.returnValue=false;
		event.cancelBubble=true;
	}

	//pass on to next handler only if handled == false
	return !handled;
}

function InitializePageRange()
{
	document.all.FromPage.disabled = false;
	document.all.ToPage.disabled = false;

	if (PrintManager.AllPages) {
		var pages = document.all.tags("DEVICERECT");

		document.all.FromPage.value = 1;
		document.all.ToPage.value = pages.length;
	} else {
		document.all.FromPage.value = PrintManager.FromPage;
		document.all.ToPage.value = PrintManager.ToPage;
	}

	SetPageRange();
}

function VerifyInt(object, defaultVal) {
	var value=parseInt(object.value);
	
	if (isNaN(value) || value<=0) {
		value=defaultVal;
	}

	object.value=value;
	return value;
}

function VerifyPageRange(totalPages)
{
	var fromPage=VerifyInt(document.all.FromPage, 1);
	var toPage=VerifyInt(document.all.ToPage, 1);

	fromPage = Math.min(fromPage, totalPages);
	toPage = Math.min(toPage, totalPages);

	if (fromPage>toPage) {
		toPage = fromPage;
	}

	document.all.FromPage.value = fromPage;
	document.all.ToPage.value = toPage;
}

function SetPageRange()
{
	var pages = document.all.tags("DEVICERECT");

	VerifyPageRange(pages.length);

	if (1 == document.all.FromPage.value && pages.length == document.all.ToPage.value) {
		PrintManager.AllPages = true;
	} else {
		PrintManager.AllPages = false;
	}

	PrintManager.FromPage = document.all.FromPage.value;
	PrintManager.ToPage = document.all.ToPage.value;
	PrintManager.PrintPanelNotification = Print_NotifyPrintPanelUpdateFromPreview;
}
</SCRIPT>

</HEAD>
<BODY ONLOAD="Init()" style="background-color:rgb(151,207,242);" SCROLL="no">
<IMG src="msntv:/Registration/images/bgimage.jpg" style="position:absolute;width:100%;height:100%;">
<IE:TEMPLATEPRINTER ID="printer"/>
<IE:HEADERFOOTER ID="headfoot"/>

<DIV ID="TopDiv" style="height:100%;">
	<DIV>
		<SPAN id="pageNumSpan">Page 1</SPAN>
		<SPAN id="pageRangeSpan">
			Print pages <input type=text id=FromPage class=inputText size=3 disabled onBlur="SetPageRange()" onfocus="FromPage.select()"> to 
			<input type=text id=ToPage class=inputText size=3 disabled onBlur="SetPageRange()" onfocus="ToPage.select()">
		</SPAN>
	</DIV>

	<DIV id="renderArea" tabIndex=0 onkeydown="HandleKey();" style="position:absolute;width:70%;height:80%;overflow:hidden;margin-top:10%;">
		<DIV ID="pagecontainer" style="position:absolute;width:100%;height:100%;">
		<!-- Dynamically created pages go here. -->
		</DIV>

		<IMG ID="ScrollUpArrow" src="file://\web\Shared\Images\ScrollIndicatorUpGlobal.gif" style="position:absolute; right:20.5%; top:37px; z-index:10; visibility:hidden;"></IMG>
		<IMG ID="ScrollDownArrow" src="file://\web\Shared\Images\ScrollIndicatorDownGlobal.gif" style="position:absolute; right:20.5%; bottom:8px; z-index:10; visibility:hidden;"></IMG>
		<IMG ID="ScrollLeftArrow" src="file://\web\Shared\Images\ScrollIndicatorLeftGlobal.gif" style="position:absolute; left:5px; top:52%; z-index:10; visibility:hidden;"></IMG>
		<IMG ID="ScrollRightArrow" src="file://\web\Shared\Images\ScrollIndicatorRightGlobal.gif" style="position:absolute; right:20%; top:52%; z-index:10; visibility:hidden;"></IMG>
	</DIV>

	<DIV id="sideBar">
		<msntv:CustomButton id="pageDown" class="sideBarElement" usepngtransparency=false label="Previous" onclick="buttonPageDown();"/>
		<msntv:CustomButton id="pageUp" class="sideBarElement" usepngtransparency=false label="Next" onclick="buttonPageUp();"/>
		<msntv:CustomButton id="printNow" class="sideBarElement" usepngtransparency=false label="Print" onclick="Print();" />
		<msntv:CustomButton id="closeTemplate" class="sideBarElement" usepngtransparency=false label="Done" onclick="ClosePreview();" />

		<table cellpadding=0 cellspacing=0 width=100% style="font-size:16px; font-family:highway;color:#5E5E5E;margin-top:20px;">
			<tr>	
				<td colspan=4 align=center style=" font-size:16px; font-family:Segoe TV; align:center; valign:middle;">
					Zoom in
				</td>
			</tr>
			
			<tr height=8px><td></td>

			<tr height=24px >
				<td width=10px></td>
				<td id=zoom4 width=37px align=middle valign=top bgColor=#90A8C9 >
				<td width=7px rowspan=10 xbgcolor=red></td>
				<td rowspan=5 vAlign=top ><msntv:CustomButton id="ZoomInButton" usepngtransparency=false  label="+" onClick="ZoomIn();" style=" font-size:20px; font-family:highway; font-weight: bold; margin:0; padding-left:7px;text-align:center; width:35px; "/>
			</tr>

			<tr height=4px><td></td>

			<tr height=18px>
				<td width=10px></td>
				<td id=zoom3 width=37px align=middle valign=top bgColor=#90A8C9>
			</tr>

			<tr height=5px><td></td>

			<tr height=14px>
				<td width=10px></td>
				<td id=zoom2 width=37px align=middle valign=top bgColor=#90A8C9>
			</tr>

			<tr height=6px><td></td>

			<tr height=11px>
				<td width=10px></td>
				<td id=zoom1 width=37px align=middle valign=top bgColor=#90A8C9>
				<td rowspan=3 vAlign=bottom ><msntv:CustomButton id="ZoomOutButton" usepngtransparency=false label="-"  onclick="ZoomOut();" style=" font-size:24px; font-family:Segoe TV; font-weight: bold; margin:0; xpadding-left:10px;xtext-align:center; width:35px; "/>
			</tr>

			<tr height=7px><td></td>

			<tr height=8px>
				<td width=10px></td>
				<td id=zoom0 width=37px align=middle valign=top bgColor=#90A8C9>
			</tr>

			<tr height=5px><td></td>

			<tr >
				<td colspan=4 align=center style=" font-size:16px; font-family:Segoe TV; align:center; valign:middle;">
					Zoom out
				</td>
			</tr>
		</table>
	</DIV>
</DIV>
</BODY>
</HTML>
